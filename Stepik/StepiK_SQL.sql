SET foreign_key_checks = 0;
DROP TABLE IF EXISTS products;
SET foreign_key_checks = 1;
CREATE TABLE products (
    id INT UNSIGNED NOT NULL,
    name VARCHAR(255) NULL,
    count INTEGER NULL,
    price INTEGER NULL
);
INSERT INTO products (id, name, count, price)
VALUES
    (1, 'Стиральная машина', 5, 10000),
    (2, 'Холодильник', 0, 10000),
    (3, 'Микроволновка', 3, 4000),
    (4, 'Пылесос', 2, 4500),
    (5, 'Вентилятор', 0, 700),
    (6, 'Телевизор', 7, 31740);


--Получите всю информацию о товарах из таблицы products.
select * from products;

--Получите название (name) и цену (price) всех товаров из таблицы products.
 select name,price from products;

--Выберите из таблицы products все записи, в которых цена (price) меньше 3000.
select * from products where price<3000;

--Выберите из таблицы products имена (name) и цены (price) всех товаров, стоимостью от 10 000 и выше.
SELECT name, price FROM products WHERE price >= 10000;

--Получите из таблицы products имена (name) товаров, которые закончились.
select name from products where products.count = 0; 

--Выберите из таблицы products название (name) и цены (price) товаров, стоимостью до 4000 включительно.
select name, price from products where price <=4000; 

--Сформулируйте SQL запрос для создания таблицы book, занесите  его в окно кода (расположено ниже)^
Поле	Тип, описание
book_id	INT PRIMARY KEY AUTO_INCREMENT
title	VARCHAR(50)
author	VARCHAR(30)
price	DECIMAL(8, 2)
amount	INT

CREATE TABLE book (
book_id	INT PRIMARY KEY AUTO_INCREMENT,
title	VARCHAR(50),
author	VARCHAR(30),
price	DECIMAL(8, 2),
amount	INT
);

--Занесите новую строку в таблицу book (текстовые значения (тип VARCHAR) заключать либо в двойные, либо в одинарные кавычки):
INSERT INTO book ( book_id, title, author, price, amount) 
VALUES ("1", "Мастер и Маргарита", "Булгаков М.А.", "670.99","3"),
('2','Белая гвардия','Булгаков М.А.', '540.50', '5'), 
('3', 'Идиот', 'Достоевский Ф.М.', '460.00', '10'),     
('4', 'Братья Карамазовы', 'Достоевский Ф.М.', '799.01', '2');   

--Выбрать авторов, название книг и их цену из таблицы book.
SELECT author, title, price FROM book
==============================================================================
--Выбрать названия книг и авторов из таблицы book, для поля title задать имя(псевдоним) Название, для поля author –  Автор. 
SELECT title  AS Название, 
       author AS Автор
  FROM book

--Для упаковки каждой книги требуется один лист бумаги, цена которого 
1 рубль 65 копеек. Посчитать стоимость упаковки для каждой книги 
(сколько денег потребуется, чтобы упаковать все экземпляры книги).
 В запросе вывести название книги, ее количество
 и стоимость упаковки, последний столбец назвать pack. 

 
 SELECT title, amount, 1.65 * amount AS pack
FROM book;

--В конце года цену всех книг на складе пересчитывают – снижают ее на 30%.
Написать SQL запрос, который из таблицы book выбирает названия, авторов,
количества и вычисляет новые цены книг.Столбец с новой ценой назвать new_price,
 цену округлить до 2-х знаков после запятой.

 10 = 100 %
 10 - 0,7 = 0,3 
 
 снизить на 30 процентов, останется 70 процентов 
 от стоимости, а это эквивалентно умножению на 0,7

 SELECT title, author, amount, ROUND((price * 0.7), 2) AS new_price FROM book

--При анализе продаж книг выяснилось, что наибольшей популярностью 
пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина.
 Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг
  Есенина - на 5%. Написать запрос, куда включить автора, название книги
  и новую цену, последний столбец назвать new_price. 
Значение округлить до двух знаков после запятой.

SELECT author, title,  
ROUND(IF(author = 'Булгаков М.А.', price * 1.10, IF(author = 'Есенин С.А.', price * 1.05, price)), 2) AS new_price
FROM book;
==========================================================================
--(равно «=», не равно «<>», больше «>», меньше «<», больше или равно«>=», меньше или равно «<=») 

--Вывести автора, название  и цены тех книг, количество которых меньше 10.
select author, title, price
from book
where amount < 10;

Приоритеты операций:
круглые скобки
умножение  (*),  деление (/)
сложение  (+), вычитание (-)
операторы сравнения (=, >, <, >=, <=, <>)
NOT
AND
OR

--Вывести название, автора,  цену  и количество всех книг, 
цена которых меньше 500 или больше 600, 
а стоимость всех экземпляров этих книг больше или равна 5000.

SELECT  title,author, price, amount FROM book
WHERE (price<500 OR price>600) AND price * amount >=5000;
===================================================================
--Выборка данных, операторы BETWEEN, IN

Оператор  IN  позволяет выбрать данные,
соответствующие значениям из списка.

--Выбрать названия и цены книг, написанных Булгаковым или Достоевским.
SELECT title, price 
FROM book
WHERE author IN ('Булгаков М.А.', 'Достоевский Ф.М.');

--Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы), 
а количество или 2, или 3, или 5, или 7 .
SELECT title,author
FROM book
WHERE (amount BETWEEN 2 AND 7 AND price BETWEEN 540.50 AND 800);


===============================================================
--По умолчанию ORDER BY выполняет сортировку по возрастанию. Чтобы управлять направлением сортировки вручную, после имени столбца указывается
ключевое слово ASC (по возрастанию) или DESC (по убыванию). 
Логический порядок операций для запроса SQL следующий:

1. FROM
2. WHERE
3. SELECT
4. ORDER BY

--Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы).
Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).

SELECT author, title 
FROM book
WHERE amount between 2 AND 14
ORDER BY author DESC,title ASC;

================================================================

SELECT title FROM book 
WHERE   title LIKE "_% и _%" /*отбирает слово И внутри названия */
    OR title LIKE "и _%" /*отбирает слово И в начале названия */
    OR title LIKE "_% и" /*отбирает слово И в конце названия */
    OR title LIKE "и" /* отбирает название, состоящее из одного слова И */

--Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». 
Считать, что в названии слова отделяются друг от друга пробелами 
и не содержат знаков препинания, между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате: буква, точка, буква, точка.
Информацию отсортировать по названию книги в алфавитном порядке.

SELECT title,author  
FROM book
WHERE title LIKE "%_ _%" AND author LIKE "%С.%"
ORDER BY title ASC;   

================================================================
Чтобы отобрать уникальные элементы некоторого столбца используется ключевое слово DISTINCT, которое размещается сразу после SELECT.
DISTINCT работает с данными из столбца, пишется после SELECT;
GROUP BY работает с данными из строк целевого столбца, пишется после FROM.

--Отобрать различные (уникальные) элементы столбца amount таблицы book.
SELECT amount
FROM book
GROUP BY amount;

==================================================================
Выборка данных, групповые функции SUM и COUNT

Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе. 
Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.

SELECT author AS Автор,
    COUNT(title) AS "Различных_книг",
    SUM(amount) AS "Количество_экземпляров"
FROM book
GROUP BY author;
===================================================================
Выборка данных, групповые функции MIN, MAX и AVG
К групповым функциям SQL относятся: MIN(), MAX() и AVG(), которые вычисляют минимальное, максимальное и среднее значение элементов столбца, относящихся к группе.

Пример
Вывести минимальную цену книги каждого автора
Запрос:

SELECT author, MIN(price) AS min_price
FROM book
GROUP BY author;

--Вывести фамилию автора, минимальную, максимальную и среднюю цену книг каждого автора .
 Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.
SELECT author,
MIN(price) AS 'Минимальная_цена',
MAX(price) AS 'Максимальная_цена',
AVG(price) AS 'Средняя_цена'
FROM book
GROUP BY author;

--Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость 
для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него.
Значения округлить до двух знаков после запятой. В запросе для расчета НДС(tax)  и Стоимости без НДС(S_without_tax) использовать следующие формулы:
SELECT 
 author, 
 ROUND(SUM(price * amount), 2) AS Стоимость,  
 ROUND(SUM(price * amount) * 0.18 / 1.18, 2) AS НДС,
 ROUND(SUM(price * amount) / 1.18, 2) AS Стоимость_без_НДС
 FROM book
 GROUP BY author;


--Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену книг на складе.
Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно.
Среднюю цену округлить до двух знаков после запятой.

SELECT
MIN(price) AS 'Минимальная_цена',
MAX(price) AS 'Максимальная_цена',
ROUND(AVG(price), 2) AS 'Средняя_цена'
FROM book


--Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. 
Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.

SELECT ROUND(AVG(price),2) AS Средняя_цена,
       ROUND(SUM(price * amount),2) AS Стоимость
FROM book
WHERE amount BETWEEN 5 AND 14;


--Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». 
В результат включить только тех авторов, у которых суммарная стоимость книг более 5000 руб.
Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.

SELECT author, 
SUM(price * amount) AS Стоимость 
FROM book 
WHERE title <> "Идиот" AND title <> "Белая гвардия" 
GROUP BY author 
HAVING SUM(price * amount) > 5000 
ORDER BY Стоимость DESC;
===================================================================

Вложенный запрос (подзапрос, внутренний запрос) – это запрос внутри другого запроса SQL.
WHERE | HAVING выражение оператор_сравнения (вложенный запрос);
WHERE | HAVING выражение, включающее вложенный запрос;
WHERE | HAVING выражение [NOT] IN (вложенный запрос);
WHERE | HAVING выражение  оператор_сравнения  ANY | ALL (вложенный запрос).

--Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. 
Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.


SELECT author, title,  price
FROM book
WHERE price <= (
         SELECT AVG(price) 
         FROM book
      ) Order by price Desc;


--Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе
не более чем на 150 рублей в отсортированном по возрастанию цены виде.

SELECT author, title, price
FROM book 
WHERE price - (SELECT MIN(price)
FROM  book ) <= 150
ORDER BY price;

Вложенный запрос, оператор IN
Пример
Вывести информацию о книгах тех авторов, общее количество экземпляров книг которых не менее 12.
Запрос:
SELECT title, author, amount, price
FROM book
WHERE author IN (
        SELECT author 
        FROM book 
        GROUP BY author 
        HAVING SUM(amount) >= 12
      );


--Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.
      SELECT  author,title, amount
FROM book
WHERE amount IN(
      SELECT amount
        FROM book 
    group by amount
    having count(amount) = 1)


Вложенный запрос, операторы ANY и ALL
Вывести информацию о тех книгах, количество которых меньше самого маленького среднего количества книг каждого автора.
Запрос:
SELECT title, author, amount, price
FROM book
WHERE amount < ALL (
        SELECT AVG(amount) 
        FROM book 
        GROUP BY author 
      );

Вывести информацию о тех книгах, количество которых меньше самого большого среднего количества книг каждого автора.
Запрос:
SELECT title, author, amount, price
FROM book
WHERE amount < ANY (
        SELECT AVG(amount) 
        FROM book 
        GROUP BY author 
      );
--Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.
      SELECT author, title, price
FROM book
WHERE price < ANY (
    SELECT MIN(price)
    FROM book
    GROUP BY author
);

Вложенный запрос после SELECT
Вложенный запрос может располагаться после ключевого слова SELECT.
В этом случае результат выполнения запроса выводится в отдельном столбце результирующей таблицы. 
При этом результатом запроса может быть только одно значение, тогда оно будет повторяться во всех строках. 
Также вложенный запрос может использоваться в выражениях.
Пример
Вывести информацию о книгах, количество экземпляров которых отличается от среднего количества экземпляров книг на складе более чем на 3,  а также указать среднее значение количества экземпляров книг.
Запрос:
SELECT title, author, amount, 
    (
     SELECT AVG(amount) 
     FROM book
    ) AS Среднее_количество 
FROM book
WHERE abs(amount - (SELECT AVG(amount) FROM book)) >3;










